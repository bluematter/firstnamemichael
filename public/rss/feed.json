{
    "version": "https://jsonfeed.org/version/1",
    "title": "Spencer Sharp",
    "feed_url": "undefined/rss/feed.json",
    "description": "Your blog description",
    "icon": "undefined/favicon.ico",
    "author": {
        "name": "Spencer Sharp"
    },
    "items": [
        {
            "id": "undefined/articles/getting-your-first-customer-in-under-one-week",
            "content_html": "\n<p>The early days of your entrepreneurial journey will be spent paying ignorance debt. You don&#x27;t know what you don&#x27;t know, despite all the advice out there (which should save you time but you&#x27;re still human).</p>\n<p>Much advice like this might not make sense, but if I could encourage one thing, that would be to fail fast, because you will fail.</p>\n<p>In this article I am going to explain how to quickly and cheaply get your first customer. I just did this the first week of March with my co founder, so I know this advice works.</p>\n<p><em>Stripe payment below we got $100 from our first paying customer in our new product launch.</em></p>\n<img loading=\"lazy\" width=\"321\" height=\"694.5\" decoding=\"async\" data-nimg=\"1\" style=\"color:transparent\" srcSet=\"/_next/image?url=https%3A%2F%2Fmotionbox-public.b-cdn.net%2Fimages%2Fblog%2FIMG_8213.PNG&amp;w=384&amp;q=75 1x, /_next/image?url=https%3A%2F%2Fmotionbox-public.b-cdn.net%2Fimages%2Fblog%2FIMG_8213.PNG&amp;w=750&amp;q=75 2x\" src=\"/_next/image?url=https%3A%2F%2Fmotionbox-public.b-cdn.net%2Fimages%2Fblog%2FIMG_8213.PNG&amp;w=750&amp;q=75\"/>\n<p>Lets crack into some practical steps and some thoughts to help breakdown how we did this.</p>\n<h2>Do things manually</h2>\n<p>It&#x27;s as simple as the title suggests. Spend your mental energy focusing on the job that needs to be done. It will take time and effort to figure out what the end result for someone is. Think of it initially as a service (sort of). Some common services we all know (which are hard to scale) web design, marketing, and design.</p>\n<p>We are not making this a full fledge service to be clear, think of more specific tasks that are repetitive or cost money/time for a specific audience following a specific set of patterns (because we eventually want to scale, but early on are treating it like a service to get validation).</p>\n<p>For us it was rendering 100+ personalized videos, people are already using email tools that send multiple messages, people are heavily adopting video messaging. This is something we can leverage into a software, it eventually needs to be able to run on it&#x27;s own with a UI.</p>\n<p>The natural thing to do for most beginners would be to start developing a software product, with a login, a database, git, deployment, they would spend time mocking up the UI, etc. This is dead wrong in most cases, remember software (in my view) is meant to be a scalable vehicle to get a user to a desired end outcome.</p>\n<p>Lets focus on the end outcome first and deliver it, even if its manual labor, because this is all a customer cares about (the outcome). All we care about is <a href=\"https://www.michaelaubry.com/articles/product-market-fit-is-a-grind\" target=\"_blank\" rel=\"noopener noreferrer\">Product Market Fit</a> and running cheap experiments to validate there is demand via collecting payments.</p>\n<h2>Selling an outcome</h2>\n<p>If you set things up correctly, the job to be done should be able to be ran in some sort of a script (ideally on your local machine). You don&#x27;t need a fancy server or even git.</p>\n<p>I would start by writing a Node.js script on your local machine, or a Python script, perhaps even a bash script depending on your skill level. If you don&#x27;t know how to code you can hire an engineer to focus only on writing a script that gets the job done, keep it super simple early on.</p>\n<p>Do not spend too much time on this, manually figure out all the steps required to get the job done, then package it into the script and focus 80%+ of your time selling the solution. Use tools like Apollo.io, sales navigator, and get aggressive. If you send 1000 messages and the responses are dull, perhaps your offer isn&#x27;t compelling enough.</p>\n<p>If it&#x27;s not getting praise, then you might not be on the right track with your solution, if this is the case, you can keep tweaking your messaging until you hit a bullseye. Thankfully you did not build a full fledge software after months of laboring away.</p>\n<h2>Collect payment</h2>\n<p>After iteration and figuring out how the desired outcome looks like by getting some signals in the market from your conversations, you now have a better idea what to build. When you find someone who is truly hungry for your offer they will want it and it&#x27;s your job to simply create a Stripe invoice page and collect payment.</p>\n<p>If you&#x27;re in a hot market there is no reason why you can&#x27;t make a sale within 1-2 weeks with enough dedication. By having the payment you can confidently say that you have a good idea on what the job to be done is and what the avatar looks like.</p>\n<h2>Deliver the goods</h2>\n<p>This is where we are at currently. I wrote a script that generates 100 personalized videos and am delivering it to our first customer. We will analyze the feedback and observe the customers avatar so that we can replicate this 10 more times.</p>\n<p>Eventually when we are super clear about the avatar, the offer, and desired outcome. It will be 10x easier to reverse engineer from there and develop a software that scales to 100-1000 customers.</p>\n<h2>Final thoughts</h2>\n<p>Before this approach I spent 1 year building a product and 3 months after that I did not know who I was selling to. I was lost, and thankfully through enough desperation I finally got a customer 1.5 years in. However, I was still lost because I was focused on the product purely and not on the customer.</p>\n<p>That pain has lead me to this approach and within 1 week we got our first customer, understand the problem, and the avatar. Starting here makes the scaling process much easier and is built on a solid foundation.</p>\n<p>If this helped you in away, then I am grateful I was able to make an impact and if you want more, please consider subscribing to the newsletter by adding your email below.</p>",
            "url": "undefined/articles/getting-your-first-customer-in-under-one-week",
            "title": "Getting your first customer in under one week",
            "summary": "Speed is your friend when starting a business. My first software it took me months/years to get the first customer. This time around I went from thought to customer in under one week. I will share my thoughts and some examples on how I did that.",
            "date_modified": "2023-03-04T00:00:00.000Z",
            "author": {
                "name": "Spencer Sharp"
            }
        },
        {
            "id": "undefined/articles/product-market-fit-is-a-grind",
            "content_html": "\n<img loading=\"lazy\" width=\"1200\" height=\"630\" decoding=\"async\" data-nimg=\"1\" style=\"color:transparent\" srcSet=\"/_next/image?url=https%3A%2F%2Fmotionbox-public.b-cdn.net%2Fimages%2Fog%2Fproduct-market-fit-is-a-grind.png&amp;w=1200&amp;q=75 1x, /_next/image?url=https%3A%2F%2Fmotionbox-public.b-cdn.net%2Fimages%2Fog%2Fproduct-market-fit-is-a-grind.png&amp;w=3840&amp;q=75 2x\" src=\"/_next/image?url=https%3A%2F%2Fmotionbox-public.b-cdn.net%2Fimages%2Fog%2Fproduct-market-fit-is-a-grind.png&amp;w=3840&amp;q=75\"/>\n<p>Forget about coding, forget about having a brilliant &quot;idea&quot;, focus on one thing and one thing only in the early days of building a company.</p>\n<p>That thing is product market fit! Without it I&#x27;ve found you&#x27;re doomed, product market fit leads to many essential factors for your business in the early days.</p>\n<p>Without it these are the things you will obtain</p>\n<ul>\n<li>lack of clarity and messaging</li>\n<li>frustration you cannot sell repetitively</li>\n<li>wasted product building cycles and time</li>\n</ul>\n<h2>The solution is PMF</h2>\n<p>Forget about your idea, forget about writing code. The mistake I&#x27;ve made is falling in love with the coding process, it&#x27;s artistic and gives you dopamine for completing tasks. You see your work come to life and it&#x27;s great, but then no one pays for it and you stay poor.</p>\n<p>But how do you get PMF without writing code? First thing I believe is important to understand is that code is a form of leverage on solving problems at scale which saves time and can be reused by infinite amounts of people.</p>\n<p>Once you understand that principle, then you know by writing your first line of code you have already over engineered the problem you&#x27;re trying to solve for. The first and only problem you should be solving for is learning what the desired outcome for a particular individual is -- that&#x27;s it, lets keep it simple.</p>\n<h2>Run cheap experiments</h2>\n<p>Coding is an expensive debt, each line of code (if written in the wrong direction) is a form of technical debt. Every hour you spend coding is a form of debt. To say the least, the less you&#x27;re talking to customers and finding PMF the more debt you&#x27;re incurring.</p>\n<p>So I believe in order to maximize success you have to be lean with your approach in finding PMF. Here are some thoughts on how you can run cheap experiments.</p>\n<p>Our number one goal is to find the desired outcome. So when you reach out to people on the internet you can offer them a service, or ask them about a problem they have.</p>\n<p>From here if you know of an obvious solution to the problem you can do it in an non scalable way. Yes, manually fix the problem. Remember software is designed to be leveraged problem solving, but under the hood there are functions that you can manually execute.</p>\n<h2>Earn your first customers manually</h2>\n<p>Something I am experimenting with is doing it this way, forget the coding, lets deliver the outcome to a group of users. We will get direct feedback and learn so much more before writing our first line of code this way. It&#x27;s scary to go out and often times we go code because it&#x27;s a comfort zone.</p>\n<p>If you lead with this approach you can start making money right away. Have more than enough data to reverse engineer into product, and have a clear road map plus your target avatar is clear as well.</p>\n<p>You know you have a winner when the customer is asking for more of your deliverables, if they&#x27;re like drug addicts and are coming back for more its time to invest in engineering.</p>\n<p>From here you can start clarifying your message to target thousands of others that fit within that target profile and they can onboard themselves.</p>\n<h2>Final thoughts</h2>\n<p>Product market fit should be the first thing you obsess over and unlock before anything else. Even if something seems obvious and in demand i.e you see competitors and you think you can copy I would avoid. The reason is you don&#x27;t understand the core problem as well and you will waste time building product while they are making sales.</p>\n<p>Cut to the chase and start building relationships with people ASAP and start collecting money ASAP. Then invest in scalable solutions.</p>\n<p>This is the way, but do take it with a grain of salt and think for yourself. I am a new entrepreneur and this is a fundamental thing I have learned the hard way three years in.</p>\n<p>If you found my thoughts and 2 cents valuable please subscribe to the newsletter where I drop tons of value weekly sharing my journey as a start up founder.</p>",
            "url": "undefined/articles/product-market-fit-is-a-grind",
            "title": "Product market fit is a grind",
            "summary": "I have been working on a company for 3 years and am convinced product market fit is the first checkpoint you must hit.",
            "date_modified": "2023-02-23T00:00:00.000Z",
            "author": {
                "name": "Spencer Sharp"
            }
        },
        {
            "id": "undefined/articles/building-a-dynamic-open-graph-maker",
            "content_html": "<p>An important feature for the new <a href=\"https://motionbox.io\" target=\"_blank\" rel=\"noopener noreferrer\">Motionbox</a> is to have beautiful looking og:image (open graph image). If you want to learn more about open graph images here is a link <a href=\"https://ogp.me/\" target=\"_blank\" rel=\"noopener noreferrer\">ogp.me</a>.</p>\n<p>Open graph images are important when sharing links on social media sites. They give your link context and act as a good marketing tool because of their visual nature. You can add graphics so good that your viewers have no choice but to click on them.</p>\n<p>Today I am going to show you how to code an open graph image maker tool that will take some dynamic data and render an image on the fly using Node.js and serverless functions.</p>\n<img alt=\"\" loading=\"lazy\" width=\"1310\" height=\"872\" decoding=\"async\" data-nimg=\"1\" class=\"hidden\" style=\"color:transparent\" srcSet=\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fplanetaria-design-system.d4cfce90.png&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fplanetaria-design-system.d4cfce90.png&amp;w=3840&amp;q=75 2x\" src=\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fplanetaria-design-system.d4cfce90.png&amp;w=3840&amp;q=75\"/>\n<h2>Tools we will be using</h2>\n<p>Before we get started here is a high level overview of all the tools we will be using. All of the code from this tutorial can be found on GitHub.</p>\n<ul>\n<li>Node.js 16+</li>\n<li>Google Cloud Functions</li>\n<li>Puppeteer</li>\n<li>Vercel</li>\n</ul>\n<h2>Getting started</h2>\n<p>I whipped up a fresh Github repo here <a href=\"https://github.com/bluematter/ogmaker\" target=\"_blank\" rel=\"noopener noreferrer\">github.com/bluematter/ogmaker</a> you can reference or use at anytime. This guide will instruct you step by step how I am building this repo and deploying it to GCP. Let&#x27;s get to coding!</p>\n<p>First create a new folder on your local computer, and via the CLI we want to <code>cd</code> into the folder and clone the repo.</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">cd</span> ~/Documents/YOUR_PROJECT\n</code></pre>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> clone https://github.com/bluematter/ogmaker.git <span class=\"token builtin class-name\">.</span>\n</code></pre>\n<p>I am a fan of TypeScript so we&#x27;re going to add a tsconfig.json file and a package.json file to get the initial project setup initiated.</p>\n<p>We&#x27;re going to initiate a <code>tsconfig.json</code> file using the following command</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">npx tsc --init\n</code></pre>\n<p>To setup your <code>package.json</code> while in the root directory type this command</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> init\n</code></pre>\n<p>Or if you prefer <code>npm</code></p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> init\n</code></pre>\n<p>Feel free to change the contents of the <code>package.json</code> I personally hit enter on every option leaving it to the defaults.</p>\n<p>Now lets install our core deps:</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D typescript\n</code></pre>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> @google-cloud/functions-framework\n</code></pre>\n<p>We need to use puppeteer v18.0.0, I wasn&#x27;t able to get v19+ to work on GCP, I would test for yourself, maybe there will be a patch after this writing. As of this writing v18.0.0 works well.</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> puppeteer@18.0.0\n</code></pre>\n<h2>Creating our function</h2>\n<p>Let&#x27;s create an <code>src</code> folder and a file called <code>index.ts</code> inside of the folder using this command.</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">mkdir</span> ./src <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> ./src <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">touch</span> index.ts\n</code></pre>\n<p>Now open the <code>./src/index.ts</code> file inside your editor and let&#x27;s write some ts code!</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">HttpFunction</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&#x27;@google-cloud/functions-framework&#x27;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> ogmaker<span class=\"token operator\">:</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">HttpFunction</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;It Works&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    works<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2>Making sure everything is setup</h2>\n<p>Before we continue development, I want to make sure everything is wired up correctly. Making sure the foundation in place before the code gets more complex is important.</p>\n<p>So lets add some scripts to our <code>package.json</code> file so we can run some tests on our code locally. Add the following into your <code>package.json</code></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">&quot;scripts&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;start&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;npx tsc &amp;&amp; npx functions-framework --target=ogmaker --allow-unauthenticated&quot;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p>Also add this somewhere above in your <code>package.json</code></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">&quot;main&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;dist/index.js&quot;</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p>We also need to update our <code>tsconfig.json</code> file to set the correct output paths for our compiled js code, we are taking our TypeScript code and using the tscompiler to generate plain JavaScript code. So add the following somewhere inside your <code>tsconfig.json</code>.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">&quot;outDir&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;./dist&quot;</span>\n</code></pre>\n<p>Boom! If everything is setup correct you can run the following in the CLI from the root directory and have a sever serving the function we created above.</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> start\n</code></pre>\n<p>You should see an output similar to this, and it should be available on port :8080.</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">michaelaubry@MacBook-Pro-2 ogmaker % <span class=\"token function\">yarn</span> start\n<span class=\"token function\">yarn</span> run v1.22.19\n$ npx tsc <span class=\"token operator\">&amp;&amp;</span> npx functions-framework --target<span class=\"token operator\">=</span>ogmaker --allow-unauthenticated\nServing function<span class=\"token punctuation\">..</span>.\nFunction: ogmaker\nSignature type: http\nURL: http://localhost:8080/\n</code></pre>\n<p>Lastly to test you get a JSON response, you should invoke <code>http://localhost:8080/</code> in your browser, or use curl, or use Postman. The response you should see looks like this</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span> <span class=\"token property\">&quot;works&quot;</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>All looks good, we are set, lets get down to business 🎉</p>\n<hr/>\n<h2>Adding Puppeteer</h2>\n<p>We&#x27;re going to import the <code>puppeteer</code> package, and set up puppeteer. One thing that is going to be important for us to develop this tool the way we want is to have custom HTML generated on the fly that we can take a screenshot of.</p>\n<p>This is why you will see the <code>import generateHTML from &#x27;./html&#x27;</code> line and I will explain more about this below.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">HttpFunction</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&#x27;@google-cloud/functions-framework&#x27;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">puppeteer</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&#x27;puppeteer&#x27;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">generateHTML</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&#x27;./html&#x27;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> ogmaker<span class=\"token operator\">:</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">HttpFunction</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> browser <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> puppeteer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">launch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      headless<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// for testing lets make the browser window appear</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">newPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setContent</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateHTML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">waitForSelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;.ready&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      works<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      e<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Create a new file in the <code>src</code> directory called <code>html.ts</code> and add this boilerplate code. This code acts as our canvas for our open graph image. Right now it&#x27;s a blank canvas, and the only goal right now is to have a canvas.</p>\n<p>Next we will talk about designing the canvas and inserting dynamic variables.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IHTML</span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token constant\">IHTML</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;html&gt;\n      &lt;head&gt;\n        &lt;meta charset=&quot;UTF-8&quot; /&gt;\n        &lt;script&gt;\n        &lt;/script&gt;\n        &lt;style&gt;\n          * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n          }\n          #root {\n            width: 100%;\n            height: 100%;\n          }\n        &lt;/style&gt;\n      &lt;/head&gt;\n      &lt;body&gt;\n        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;\n        &lt;script&gt;\n          const onReady = async () =&gt; {\n            // Ready begin rendering\n            const div = document.createElement(&#x27;div&#x27;)\n            div.className = &#x27;ready&#x27;\n            document.body.appendChild(div)\n          };\n          document.addEventListener(&quot;DOMContentLoaded&quot;, onReady);\n        &lt;/script&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Before we move on, make sure everything is working correctly. Run the following command in the root directory.</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> start\n</code></pre>\n<p>The app should be served up on port :8080, so if you invoke the url, it should be triggered and puppeteer should open in non headless mode and you should see a browser instance with our HTML loaded up.</p>\n<hr/>\n<h2>Lets build our canvas</h2>\n<p>First thing I want to setup is our canvas size. After a quick Google search I can see the common open graph image size is <strong>1200 x 630</strong> pixels.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IHTML</span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token constant\">IHTML</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;html&gt;\n      &lt;head&gt;\n        &lt;meta charset=&quot;UTF-8&quot; /&gt;\n        &lt;script&gt;\n        &lt;/script&gt;\n        &lt;style&gt;\n          * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n          }\n\n          body {\n            width: 1200px;\n            height: 630px;\n          }\n\n          #root {\n            width: 100%;\n            height: 100%;\n          }\n        &lt;/style&gt;\n      &lt;/head&gt;\n      &lt;body&gt;\n        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;\n        &lt;script&gt;\n          const onReady = async () =&gt; {\n            // Ready begin rendering\n            const div = document.createElement(&#x27;div&#x27;)\n            div.className = &#x27;ready&#x27;\n            document.body.appendChild(div)\n          };\n          document.addEventListener(&quot;DOMContentLoaded&quot;, onReady);\n        &lt;/script&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>The key is adding the CSS inside the document, adding width and height to the body selector is where the magic is.</p>\n<pre class=\"language-css\"><code class=\"language-CSS\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">630</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Now with the power of some basic HTML and CSS we can design our open graph image, lets do this first, then move onto talking about how to dynamically insert content, like images and text.</p>\n<h2>Design</h2>\n<p>For this tutorial I am going to keep it simple. The main criteria I have are the following</p>\n<ul>\n<li>Has some base color/image as a default</li>\n<li>Big bold marketing text in the center of the image</li>\n<li>A nice border around the image</li>\n<li>Possibly a component that holds meta data like avatar, username, date, etc</li>\n</ul>\n<img alt=\"open graph image example\" loading=\"lazy\" width=\"1200\" height=\"630\" decoding=\"async\" data-nimg=\"1\" class=\"border\" style=\"color:transparent\" srcSet=\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fopen-graph-example.43de6f4d.png&amp;w=1200&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fopen-graph-example.43de6f4d.png&amp;w=3840&amp;q=75 2x\" src=\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fopen-graph-example.43de6f4d.png&amp;w=3840&amp;q=75\"/>\n<p>Lets add a few basic styles, nothing too fancy for this demo, I will let you style it however you want.</p>\n<pre class=\"language-css\"><code class=\"language-CSS\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1200</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">630</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode color\">#2362bd</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\"><span class=\"token id\">#root</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token unit\">%</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token unit\">%</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode color\">#fff</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> sans-serif<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-transform</span><span class=\"token punctuation\">:</span> uppercase<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token unit\">px</span> solid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Then I added an <code>H1</code> element inside the <code>#root</code> node. Something like this.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>root<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>OG MAKER<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>When booting up puppeteer locally in headfull mode, you should see something like this. Not the most pretty open graph image in the world, but it&#x27;s a great foundation.</p>\n<img alt=\"example of open graph image inside puppeteer\" loading=\"lazy\" width=\"672\" height=\"373\" decoding=\"async\" data-nimg=\"1\" class=\"border\" style=\"color:transparent\" srcSet=\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpuppeteer-og.27213735.png&amp;w=750&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpuppeteer-og.27213735.png&amp;w=1920&amp;q=75 2x\" src=\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpuppeteer-og.27213735.png&amp;w=1920&amp;q=75\"/>\n<h2>Adding dynamic text</h2>\n<p>For this tutorial I am going to skip out on adding dynamic images and colors. We could turn this into a service and offer templates, and lots of custom options. I will show you the basics of inserting dynamic variables and that should be enough to get you going if you wanted to add more options.</p>\n<p>Most software is I/O (input and output) so the important thing to keep in mind here when adding dynamic properties is to think about where the input will be coming from.</p>\n<p>Since we are invoking this function over HTTP, we have the ability to pass in data to our <code>req</code> request handler. This is the perfect place to add an input variable to our API.</p>\n<p>Inside of <code>/src/index.ts</code> within our function we want to add a <code>req.body</code> property called <code>title</code> that we can use to pass into our HTML document.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>The full function looks like this</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">HttpFunction</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&#x27;@google-cloud/functions-framework&#x27;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">puppeteer</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&#x27;puppeteer&#x27;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">generateHTML</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&#x27;./html&#x27;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> ogmaker<span class=\"token operator\">:</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">HttpFunction</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// we are reading title inside the request body here</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> browser <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> puppeteer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">launch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      headless<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">newPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// we are passing the title into our function here</span>\n    <span class=\"token keyword control-flow\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setContent</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">generateHTML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        title<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">waitForSelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;.ready&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      works<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      e<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Then going back to our HTML code, you can see we add title to our interface and make it an optional prop. The reason for that is because there is no guarantee that the function will be invoked with title in the request body.</p>\n<p>We could throw an error if title is not supplied, but in this case I&#x27;d rather let the code run and use a back up title in case one is not supplied.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IHTML</span></span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token constant\">IHTML</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;html&gt;\n      &lt;head&gt;\n        &lt;meta charset=&quot;UTF-8&quot; /&gt;\n        &lt;script&gt;\n        &lt;/script&gt;\n        &lt;style&gt;\n          * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n          }\n\n          body {\n            width: 1200px;\n            height: 630px;\n            overflow: hidden;\n            background: #2362bd;\n          }\n\n          #root {\n            width: 100%;\n            height: 100%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: #fff;\n            font-family: sans-serif;\n            text-transform: uppercase;\n            border: 10px solid;\n          }\n        &lt;/style&gt;\n      &lt;/head&gt;\n      &lt;body&gt;\n        &lt;div id=&quot;root&quot;&gt;\n          &lt;h1&gt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>title <span class=\"token operator\">?</span> title <span class=\"token operator\">:</span> <span class=\"token string\">&#x27;No title provided&#x27;</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/h1&gt;\n        &lt;/div&gt;\n        &lt;script&gt;\n          const onReady = async () =&gt; {\n            // Ready begin rendering\n            const div = document.createElement(&#x27;div&#x27;)\n            div.className = &#x27;ready&#x27;\n            document.body.appendChild(div)\n          };\n          document.addEventListener(&quot;DOMContentLoaded&quot;, onReady);\n        &lt;/script&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>If you use Postman and send a POST request using x-www-form-urlencoded and insert <code>title</code> as a key and whatever dynamic string you want to appear in your open graph image as the value, then press send, you should see puppeteer boot up with your dynamic request.</p>\n<img alt=\"example request using postman\" loading=\"lazy\" width=\"1719\" height=\"976\" decoding=\"async\" data-nimg=\"1\" style=\"color:transparent\" srcSet=\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostman.55454ed2.png&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostman.55454ed2.png&amp;w=3840&amp;q=75 2x\" src=\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostman.55454ed2.png&amp;w=3840&amp;q=75\"/>\n<h2>Taking the screenshot</h2>\n<p>The final thing I want to do in this tutorial to wrap up our feature is get the binary data of the pixels, i.e a screen shot of the element as a .jpg file or .png file.</p>\n<p>With Puppeteer this is fairly easy, so let&#x27;s crack right into it, we are almost done with v1.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">HttpFunction</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&#x27;@google-cloud/functions-framework&#x27;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">puppeteer</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&#x27;puppeteer&#x27;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">generateHTML</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&#x27;./html&#x27;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> ogmaker<span class=\"token operator\">:</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">HttpFunction</span></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> browser <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> puppeteer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">launch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      headless<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">newPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setContent</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">generateHTML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        title<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">waitForSelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;.ready&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// screenshot</span>\n    <span class=\"token keyword\">const</span> pageFrame <span class=\"token operator\">=</span> page<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">mainFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> rootHandle <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> pageFrame<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;#root&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>rootHandle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> screenshot<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">|</span> <span class=\"token maybe-class-name\">Buffer</span> <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> rootHandle<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">screenshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        encoding<span class=\"token operator\">:</span> <span class=\"token string\">&#x27;base64&#x27;</span><span class=\"token punctuation\">,</span>\n        omitBackground<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">&#x27;jpeg&#x27;</span><span class=\"token punctuation\">,</span>\n        quality<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n        captureBeyondViewport<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> screenshot <span class=\"token operator\">===</span> <span class=\"token string\">&#x27;string&#x27;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// we can take this buffer and upload it to GCP if we would like to</span>\n        <span class=\"token keyword\">const</span> screenshotBuffer <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token maybe-class-name\">Buffer</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span>screenshot<span class=\"token punctuation\">,</span> <span class=\"token string\">&#x27;base64&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Error</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;Screenshot is not a string&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Error</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;No root element found&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      works<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      error<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Now we have a <code>Buffer</code> that we can use to send to a Google Bucket or AWS S3 Bucket. Right here in this line <code>const screenshotBuffer = await Buffer.from(screenshot, &#x27;base64&#x27;)</code> is where the magic is.</p>\n<h2>Uploading to the Cloud</h2>\n<p>For this tutorial and codebase I will be using Google Cloud Buckets. I just setup a bucket on my account, go ahead and do the same. If you need help with that feel free to reach out to me, or preferably spend a few minutes Googling how to do that.</p>\n<p>We are going to use the <code>@google-cloud/storage</code> Node.js SDK. So let&#x27;s install it.</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> @google-cloud/storage\n</code></pre>\n<p>Now that we have the package, lets start writing the code to take our buffer data and have it send it to our bucket.</p>\n<p>To keep our code modular and easier to read/work with, I am going to create a file called <code>upload.ts</code> within the <code>src</code> folder. The code will look like this.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Storage</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&#x27;@google-cloud/storage&#x27;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">IUpload</span></span> <span class=\"token punctuation\">{</span>\n  buffer<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Buffer</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> storage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Storage</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> buffer <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">IUpload</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> bucket <span class=\"token operator\">=</span> storage<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bucket</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;YOUR_BUCKET_NAME_HERE&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">file</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;test.jpg&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Uploads the file.</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword control-flow\">await</span> file<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">save</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>There is one minor improvement we can make. Right now we are hardcoding the file name to <code>test.jpg</code>, this is no good if we want to scale this function. We have two options, and can choose either option or choose to combine both options into one.</p>\n<p>The first option is to pass in a file name or ID via the client and use that as our ID. This gives us more control, and we can use slugs etc as our ID.</p>\n<p>The other option is to generate a unique ID using UUID.</p>\n<p>We can also combine both options and look for an ID param in the <code>req.body</code> and if it exists we will use it. If it does not exist, we can default to UUID. I actually like this option better, it&#x27;s more resilient and configurable. Lets build it!</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">IUpload</span></span> <span class=\"token punctuation\">{</span>\n  buffer<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Buffer</span><span class=\"token punctuation\">;</span>\n  fileName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Lets add this to our interface &amp; make it optional</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Now on line 12 we can write a ternary</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">file</span><span class=\"token punctuation\">(</span>fileName <span class=\"token operator\">?</span> fileName <span class=\"token operator\">:</span> <span class=\"token string\">&#x27;test.jpg&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Lets make sure to read this in our <code>req.body</code> within our <code>index.ts</code> file.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> fileName <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Then we must pass that argument into our <code>upload</code> function like this</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword control-flow\">await</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  buffer<span class=\"token operator\">:</span> screenshotBuffer<span class=\"token punctuation\">,</span>\n  fileName<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Great, but we know this variable can be <code>undefined</code> and in that case we want to use a library called <code>uuid</code> to uniquely generate an ID for us. Lets install it!</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> uuid <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D @types/uuid\n</code></pre>\n<p>Then lets use it in the place of <code>test.jpg</code> like this</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Storage</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&#x27;@google-cloud/storage&#x27;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> v1 <span class=\"token keyword module\">as</span> uuid <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&#x27;uuid&#x27;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">IUpload</span></span> <span class=\"token punctuation\">{</span>\n  buffer<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Buffer</span><span class=\"token punctuation\">;</span>\n  fileName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> storage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Storage</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> buffer<span class=\"token punctuation\">,</span> fileName <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">IUpload</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fName <span class=\"token operator\">=</span> fileName <span class=\"token operator\">?</span> fileName <span class=\"token operator\">:</span> <span class=\"token function\">uuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">&#x27;.jpg&#x27;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> bucket <span class=\"token operator\">=</span> storage<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bucket</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;motionbox-og-images&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">file</span><span class=\"token punctuation\">(</span>fName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// lets return the file name if its uniquely generated so we can have reference on the client</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    fName<span class=\"token punctuation\">,</span>\n    uploaded<span class=\"token operator\">:</span> <span class=\"token keyword control-flow\">await</span> file<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">save</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Then in our <code>index.ts</code> file we can send back the file name to the client in the case it is uniquely generated, this is important to maintain reference to where the file is located, in the case you want to save it in a database or render it on the screen upon a response.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> uploadedFile <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  buffer<span class=\"token operator\">:</span> screenshotBuffer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nres<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  created<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  uploadedFile<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>After sending your request you should get a response similar to this</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;created&quot;</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;uploadedFile&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">&quot;fName&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;eb54f610-a67d-11ed-a4e2-bda12d775f34.jpg&quot;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2>Deploying</h2>\n<p>The final thing that we need to setup in order to deploy our function properly to GCP is a tiny little script command that will compile our TypeScript code and deploy for us.</p>\n<p>Open your <code>package.json</code> file and add this new script key value pair. We already have the <code>start</code> script, we are now adding <code>deploy</code>.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">&quot;scripts&quot;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">&quot;start&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;npx tsc &amp;&amp; npx functions-framework --target=ogmaker --allow-unauthenticated&quot;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">&quot;deploy&quot;</span><span class=\"token operator\">:</span> <span class=\"token string\">&quot;npx tsc &amp;&amp; gcloud functions deploy ogmaker --gen2 --runtime=nodejs16 --region=us-central1 --source=. --entry-point=ogmaker --trigger-http --allow-unauthenticated --timeout=600 --memory=2GiB&quot;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<p>Before you can actually use the <code>gcloud</code> command you need to install it on your system and configure it. Here is a link to installation instructions for installing <code>gcloud</code> on your system <a href=\"https://cloud.google.com/sdk/docs/install\" target=\"_blank\" rel=\"noopener noreferrer\">cloud.google.com/sdk/docs/install</a></p>\n<p>Lastly, feel free to adjust the parameters of the <code>deploy</code> command you can adjust <code>--runtime</code> to use a different version of node.js. You can change your <code>--region</code>, <code>--timeout</code>, and <code>--memory</code> settings.</p>\n<h2>Final thoughts</h2>\n<p>I hope this was insightful, and again all this code is hosted on GitHub under this repo <a href=\"https://github.com/bluematter/ogmaker\" target=\"_blank\" rel=\"noopener noreferrer\">github.com/bluematter/ogmaker</a>. If you have any suggestions on making this better, or would like to fork and have your own copy, please feel free to do so.</p>\n<p>If you enjoyed this and want more, sign up to the newsletter where I will keep you in the loop.</p>\n<p>I&#x27;m going to turn this code into a micro SaaS product and write another follow up post around how I will turn it into a product and market it. Subscribe if you want me to email you when that post is ready! 👇 enter your email for the updates, no spam, unsubscribe at any time.</p>",
            "url": "undefined/articles/building-a-dynamic-open-graph-maker",
            "title": "Building a dynamic open graph maker",
            "summary": "How to build a dynamic open graph image maker using Node.js",
            "date_modified": "2023-02-06T00:00:00.000Z",
            "author": {
                "name": "Spencer Sharp"
            }
        }
    ]
}