<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Spencer Sharp</title>
        <link>undefined</link>
        <description>Your blog description</description>
        <lastBuildDate>Tue, 07 Feb 2023 03:58:19 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <image>
            <title>Spencer Sharp</title>
            <url>undefined/favicon.ico</url>
            <link>undefined</link>
        </image>
        <copyright>All rights reserved 2023</copyright>
        <item>
            <title><![CDATA[Building a dynamic open graph maker]]></title>
            <link>undefined/articles/building-a-dynamic-open-graph-maker</link>
            <guid>undefined/articles/building-a-dynamic-open-graph-maker</guid>
            <pubDate>Mon, 06 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[How to build a dynamic open graph image maker using Node.js]]></description>
            <content:encoded><![CDATA[<p>An important feature for the new <a href="https://motionbox.io" target="_blank" rel="noopener noreferrer">Motionbox</a> is to have beautiful looking og:image (open graph image). If you want to learn more about open graph images here is a link <a href="https://ogp.me/" target="_blank" rel="noopener noreferrer">ogp.me</a>.</p>
<p>Open graph images are important when sharing links on social media sites. They give your link context and act as a good marketing tool because of their visual nature. You can add graphics so good that your viewers have no choice but to click on them.</p>
<p>Today I am going to show you how to code an open graph image maker tool that will take some dynamic data and render an image on the fly using Node.js and serverless functions.</p>
<img class="hidden" alt="" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fplanetaria-design-system.d4cfce90.png&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fplanetaria-design-system.d4cfce90.png&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fplanetaria-design-system.d4cfce90.png&amp;w=3840&amp;q=75" width="1310" height="872" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<h2>Tools we will be using</h2>
<p>Before we get started here is a high level overview of all the tools we will be using. All of the code from this tutorial can be found on GitHub.</p>
<ul>
<li>Node.js 16+</li>
<li>Google Cloud Functions</li>
<li>Puppeteer</li>
<li>Vercel</li>
</ul>
<h2>Getting started</h2>
<p>I whipped up a fresh Github repo here <a href="https://github.com/bluematter/ogmaker" target="_blank" rel="noopener noreferrer">github.com/bluematter/ogmaker</a> you can reference or use at anytime. This guide will instruct you step by step how I am building this repo and deploying it to GCP. Let&#x27;s get to coding!</p>
<p>First create a new folder on your local computer, and via the CLI we want to <code>cd</code> into the folder and clone the repo.</p>
<pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">cd</span> ~/Documents/YOUR_PROJECT
</code></pre>
<pre class="language-shell"><code class="language-shell"><span class="token function">git</span> clone https://github.com/bluematter/ogmaker.git <span class="token builtin class-name">.</span>
</code></pre>
<p>I am a fan of TypeScript so we&#x27;re going to add a tsconfig.json file and a package.json file to get the initial project setup initiated.</p>
<p>We&#x27;re going to initiate a <code>tsconfig.json</code> file using the following command</p>
<pre class="language-shell"><code class="language-shell">npx tsc --init
</code></pre>
<p>To setup your <code>package.json</code> while in the root directory type this command</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">yarn</span> init
</code></pre>
<p>Or if you prefer <code>npm</code></p>
<pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> init
</code></pre>
<p>Feel free to change the contents of the <code>package.json</code> I personally hit enter on every option leaving it to the defaults.</p>
<p>Now lets install our core deps:</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">yarn</span> <span class="token function">add</span> -D typescript
</code></pre>
<pre class="language-shell"><code class="language-shell"><span class="token function">yarn</span> <span class="token function">add</span> @google-cloud/functions-framework
</code></pre>
<p>We need to use puppeteer v18.0.0, I wasn&#x27;t able to get v19+ to work on GCP, I would test for yourself, maybe there will be a patch after this writing. As of this writing v18.0.0 works well.</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">yarn</span> <span class="token function">add</span> puppeteer@18.0.0
</code></pre>
<h2>Creating our function</h2>
<p>Let&#x27;s create an <code>src</code> folder and a file called <code>index.ts</code> inside of the folder using this command.</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">mkdir</span> ./src <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> ./src <span class="token operator">&amp;&amp;</span> <span class="token function">touch</span> index.ts
</code></pre>
<p>Now open the <code>./src/index.ts</code> file inside your editor and let&#x27;s write some ts code!</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">HttpFunction</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@google-cloud/functions-framework&#x27;</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword">const</span> ogmaker<span class="token operator">:</span> <span class="token function-variable function"><span class="token maybe-class-name">HttpFunction</span></span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&#x27;It Works&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  res<span class="token punctuation">.</span><span class="token method function property-access">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    works<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<h2>Making sure everything is setup</h2>
<p>Before we continue development, I want to make sure everything is wired up correctly. Making sure the foundation in place before the code gets more complex is important.</p>
<p>So lets add some scripts to our <code>package.json</code> file so we can run some tests on our code locally. Add the following into your <code>package.json</code></p>
<pre class="language-json"><code class="language-json"><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npx tsc &amp;&amp; npx functions-framework --target=ogmaker --allow-unauthenticated&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre>
<p>Also add this somewhere above in your <code>package.json</code></p>
<pre class="language-json"><code class="language-json"><span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/index.js&quot;</span><span class="token punctuation">,</span>
</code></pre>
<p>We also need to update our <code>tsconfig.json</code> file to set the correct output paths for our compiled js code, we are taking our TypeScript code and using the tscompiler to generate plain JavaScript code. So add the following somewhere inside your <code>tsconfig.json</code>.</p>
<pre class="language-json"><code class="language-json"><span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist&quot;</span>
</code></pre>
<p>Boom! If everything is setup correct you can run the following in the CLI from the root directory and have a sever serving the function we created above.</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">yarn</span> start
</code></pre>
<p>You should see an output similar to this, and it should be available on port :8080.</p>
<pre class="language-shell"><code class="language-shell">michaelaubry@MacBook-Pro-2 ogmaker % <span class="token function">yarn</span> start
<span class="token function">yarn</span> run v1.22.19
$ npx tsc <span class="token operator">&amp;&amp;</span> npx functions-framework --target<span class="token operator">=</span>ogmaker --allow-unauthenticated
Serving function<span class="token punctuation">..</span>.
Function: ogmaker
Signature type: http
URL: http://localhost:8080/
</code></pre>
<p>Lastly to test you get a JSON response, you should invoke <code>http://localhost:8080/</code> in your browser, or use curl, or use Postman. The response you should see looks like this</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">&quot;works&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
</code></pre>
<p>All looks good, we are set, lets get down to business 🎉</p>
<hr/>
<h2>Adding Puppeteer</h2>
<p>We&#x27;re going to import the <code>puppeteer</code> package, and set up puppeteer. One thing that is going to be important for us to develop this tool the way we want is to have custom HTML generated on the fly that we can take a screenshot of.</p>
<p>This is why you will see the <code>import generateHTML from &#x27;./html&#x27;</code> line and I will explain more about this below.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">HttpFunction</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@google-cloud/functions-framework&#x27;</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports">puppeteer</span> <span class="token keyword module">from</span> <span class="token string">&#x27;puppeteer&#x27;</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports">generateHTML</span> <span class="token keyword module">from</span> <span class="token string">&#x27;./html&#x27;</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword">const</span> ogmaker<span class="token operator">:</span> <span class="token function-variable function"><span class="token maybe-class-name">HttpFunction</span></span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword control-flow">await</span> puppeteer<span class="token punctuation">.</span><span class="token method function property-access">launch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      headless<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// for testing lets make the browser window appear</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword control-flow">await</span> browser<span class="token punctuation">.</span><span class="token method function property-access">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword control-flow">await</span> page<span class="token punctuation">.</span><span class="token method function property-access">setContent</span><span class="token punctuation">(</span><span class="token function">generateHTML</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword control-flow">await</span> page<span class="token punctuation">.</span><span class="token method function property-access">waitForSelector</span><span class="token punctuation">(</span><span class="token string">&#x27;.ready&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    res<span class="token punctuation">.</span><span class="token method function property-access">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      works<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      e<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>Create a new file in the <code>src</code> directory called <code>html.ts</code> and add this boilerplate code. This code acts as our canvas for our open graph image. Right now it&#x27;s a blank canvas, and the only goal right now is to have a canvas.</p>
<p>Next we will talk about designing the canvas and inserting dynamic variables.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">IHTML</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">:</span> <span class="token constant">IHTML</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;html&gt;
      &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot; /&gt;
        &lt;script&gt;
        &lt;/script&gt;
        &lt;style&gt;
          * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
          }
          #root {
            width: 100%;
            height: 100%;
          }
        &lt;/style&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;
        &lt;script&gt;
          const onReady = async () =&gt; {
            // Ready begin rendering
            const div = document.createElement(&#x27;div&#x27;)
            div.className = &#x27;ready&#x27;
            document.body.appendChild(div)
          };
          document.addEventListener(&quot;DOMContentLoaded&quot;, onReady);
        &lt;/script&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>Before we move on, make sure everything is working correctly. Run the following command in the root directory.</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">yarn</span> start
</code></pre>
<p>The app should be served up on port :8080, so if you invoke the url, it should be triggered and puppeteer should open in non headless mode and you should see a browser instance with our HTML loaded up.</p>
<hr/>
<h2>Lets build our canvas</h2>
<p>First thing I want to setup is our canvas size. After a quick Google search I can see the common open graph image size is <strong>1200 x 630</strong> pixels.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">IHTML</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">:</span> <span class="token constant">IHTML</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;html&gt;
      &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot; /&gt;
        &lt;script&gt;
        &lt;/script&gt;
        &lt;style&gt;
          * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
          }

          body {
            width: 1200px;
            height: 630px;
          }

          #root {
            width: 100%;
            height: 100%;
          }
        &lt;/style&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;
        &lt;script&gt;
          const onReady = async () =&gt; {
            // Ready begin rendering
            const div = document.createElement(&#x27;div&#x27;)
            div.className = &#x27;ready&#x27;
            document.body.appendChild(div)
          };
          document.addEventListener(&quot;DOMContentLoaded&quot;, onReady);
        &lt;/script&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>The key is adding the CSS inside the document, adding width and height to the body selector is where the magic is.</p>
<pre class="language-css"><code class="language-CSS"><span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1200</span><span class="token unit">px</span><span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">630</span><span class="token unit">px</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Now with the power of some basic HTML and CSS we can design our open graph image, lets do this first, then move onto talking about how to dynamically insert content, like images and text.</p>
<h2>Design</h2>
<p>For this tutorial I am going to keep it simple. The main criteria I have are the following</p>
<ul>
<li>Has some base color/image as a default</li>
<li>Big bold marketing text in the center of the image</li>
<li>A nice border around the image</li>
<li>Possibly a component that holds meta data like avatar, username, date, etc</li>
</ul>
<img class="border" alt="open graph image example" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fopen-graph-example.43de6f4d.png&amp;w=1200&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fopen-graph-example.43de6f4d.png&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fopen-graph-example.43de6f4d.png&amp;w=3840&amp;q=75" width="1200" height="630" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>Lets add a few basic styles, nothing too fancy for this demo, I will let you style it however you want.</p>
<pre class="language-css"><code class="language-CSS"><span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1200</span><span class="token unit">px</span><span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">630</span><span class="token unit">px</span><span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode color">#2362bd</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token id">#root</span></span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token unit">%</span><span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token unit">%</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode color">#fff</span><span class="token punctuation">;</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> sans-serif<span class="token punctuation">;</span>
  <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercase<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token unit">px</span> solid<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Then I added an <code>H1</code> element inside the <code>#root</code> node. Something like this.</p>
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>OG MAKER<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre>
<p>When booting up puppeteer locally in headfull mode, you should see something like this. Not the most pretty open graph image in the world, but it&#x27;s a great foundation.</p>
<img class="border" alt="example of open graph image inside puppeteer" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpuppeteer-og.27213735.png&amp;w=750&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpuppeteer-og.27213735.png&amp;w=1920&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpuppeteer-og.27213735.png&amp;w=1920&amp;q=75" width="672" height="373" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<h2>Adding dynamic text</h2>
<p>For this tutorial I am going to skip out on adding dynamic images and colors. We could turn this into a service and offer templates, and lots of custom options. I will show you the basics of inserting dynamic variables and that should be enough to get you going if you wanted to add more options.</p>
<p>Most software is I/O (input and output) so the important thing to keep in mind here when adding dynamic properties is to think about where the input will be coming from.</p>
<p>Since we are invoking this function over HTTP, we have the ability to pass in data to our <code>req</code> request handler. This is the perfect place to add an input variable to our API.</p>
<p>Inside of <code>/src/index.ts</code> within our function we want to add a <code>req.body</code> property called <code>title</code> that we can use to pass into our HTML document.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> <span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token property-access">body</span><span class="token punctuation">;</span>
</code></pre>
<p>The full function looks like this</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">HttpFunction</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@google-cloud/functions-framework&#x27;</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports">puppeteer</span> <span class="token keyword module">from</span> <span class="token string">&#x27;puppeteer&#x27;</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports">generateHTML</span> <span class="token keyword module">from</span> <span class="token string">&#x27;./html&#x27;</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword">const</span> ogmaker<span class="token operator">:</span> <span class="token function-variable function"><span class="token maybe-class-name">HttpFunction</span></span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// we are reading title inside the request body here</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token property-access">body</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword control-flow">await</span> puppeteer<span class="token punctuation">.</span><span class="token method function property-access">launch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      headless<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword control-flow">await</span> browser<span class="token punctuation">.</span><span class="token method function property-access">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// we are passing the title into our function here</span>
    <span class="token keyword control-flow">await</span> page<span class="token punctuation">.</span><span class="token method function property-access">setContent</span><span class="token punctuation">(</span>
      <span class="token function">generateHTML</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        title<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword control-flow">await</span> page<span class="token punctuation">.</span><span class="token method function property-access">waitForSelector</span><span class="token punctuation">(</span><span class="token string">&#x27;.ready&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    res<span class="token punctuation">.</span><span class="token method function property-access">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      works<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      e<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>Then going back to our HTML code, you can see we add title to our interface and make it an optional prop. The reason for that is because there is no guarantee that the function will be invoked with title in the request body.</p>
<p>We could throw an error if title is not supplied, but in this case I&#x27;d rather let the code run and use a back up title in case one is not supplied.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">IHTML</span></span> <span class="token punctuation">{</span>
  title<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token constant">IHTML</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    &lt;html&gt;
      &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot; /&gt;
        &lt;script&gt;
        &lt;/script&gt;
        &lt;style&gt;
          * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
          }

          body {
            width: 1200px;
            height: 630px;
            overflow: hidden;
            background: #2362bd;
          }

          #root {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #fff;
            font-family: sans-serif;
            text-transform: uppercase;
            border: 10px solid;
          }
        &lt;/style&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;div id=&quot;root&quot;&gt;
          &lt;h1&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title <span class="token operator">?</span> title <span class="token operator">:</span> <span class="token string">&#x27;No title provided&#x27;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h1&gt;
        &lt;/div&gt;
        &lt;script&gt;
          const onReady = async () =&gt; {
            // Ready begin rendering
            const div = document.createElement(&#x27;div&#x27;)
            div.className = &#x27;ready&#x27;
            document.body.appendChild(div)
          };
          document.addEventListener(&quot;DOMContentLoaded&quot;, onReady);
        &lt;/script&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>If you use Postman and send a POST request using x-www-form-urlencoded and insert <code>title</code> as a key and whatever dynamic string you want to appear in your open graph image as the value, then press send, you should see puppeteer boot up with your dynamic request.</p>
<img alt="example request using postman" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostman.55454ed2.png&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostman.55454ed2.png&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostman.55454ed2.png&amp;w=3840&amp;q=75" width="1719" height="976" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<h2>Taking the screenshot</h2>
<p>The final thing I want to do in this tutorial to wrap up our feature is get the binary data of the pixels, i.e a screen shot of the element as a .jpg file or .png file.</p>
<p>With Puppeteer this is fairly easy, so let&#x27;s crack right into it, we are almost done with v1.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">HttpFunction</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@google-cloud/functions-framework&#x27;</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports">puppeteer</span> <span class="token keyword module">from</span> <span class="token string">&#x27;puppeteer&#x27;</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports">generateHTML</span> <span class="token keyword module">from</span> <span class="token string">&#x27;./html&#x27;</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword">const</span> ogmaker<span class="token operator">:</span> <span class="token function-variable function"><span class="token maybe-class-name">HttpFunction</span></span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token property-access">body</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword control-flow">await</span> puppeteer<span class="token punctuation">.</span><span class="token method function property-access">launch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      headless<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword control-flow">await</span> browser<span class="token punctuation">.</span><span class="token method function property-access">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword control-flow">await</span> page<span class="token punctuation">.</span><span class="token method function property-access">setContent</span><span class="token punctuation">(</span>
      <span class="token function">generateHTML</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        title<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword control-flow">await</span> page<span class="token punctuation">.</span><span class="token method function property-access">waitForSelector</span><span class="token punctuation">(</span><span class="token string">&#x27;.ready&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// screenshot</span>
    <span class="token keyword">const</span> pageFrame <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token method function property-access">mainFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> rootHandle <span class="token operator">=</span> <span class="token keyword control-flow">await</span> pageFrame<span class="token punctuation">.</span><span class="token method function property-access">$</span><span class="token punctuation">(</span><span class="token string">&#x27;#root&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>rootHandle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> screenshot<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token maybe-class-name">Buffer</span> <span class="token operator">=</span> <span class="token keyword control-flow">await</span> rootHandle<span class="token punctuation">.</span><span class="token method function property-access">screenshot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        encoding<span class="token operator">:</span> <span class="token string">&#x27;base64&#x27;</span><span class="token punctuation">,</span>
        omitBackground<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        type<span class="token operator">:</span> <span class="token string">&#x27;jpeg&#x27;</span><span class="token punctuation">,</span>
        quality<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
        captureBeyondViewport<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> screenshot <span class="token operator">===</span> <span class="token string">&#x27;string&#x27;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// we can take this buffer and upload it to GCP if we would like to</span>
        <span class="token keyword">const</span> screenshotBuffer <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token maybe-class-name">Buffer</span><span class="token punctuation">.</span><span class="token keyword module">from</span><span class="token punctuation">(</span>screenshot<span class="token punctuation">,</span> <span class="token string">&#x27;base64&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
        <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token known-class-name class-name">Error</span></span><span class="token punctuation">(</span><span class="token string">&#x27;Screenshot is not a string&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
      <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token known-class-name class-name">Error</span></span><span class="token punctuation">(</span><span class="token string">&#x27;No root element found&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    res<span class="token punctuation">.</span><span class="token method function property-access">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      works<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token method function property-access">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      error<span class="token operator">:</span> e<span class="token punctuation">.</span><span class="token property-access">message</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>Now we have a <code>Buffer</code> that we can use to send to a Google Bucket or AWS S3 Bucket. Right here in this line <code>const screenshotBuffer = await Buffer.from(screenshot, &#x27;base64&#x27;)</code> is where the magic is.</p>
<h2>Uploading to the Cloud</h2>
<p>For this tutorial and codebase I will be using Google Cloud Buckets. I just setup a bucket on my account, go ahead and do the same. If you need help with that feel free to reach out to me, or preferably spend a few minutes Googling how to do that.</p>
<p>We are going to use the <code>@google-cloud/storage</code> Node.js SDK. So let&#x27;s install it.</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">yarn</span> <span class="token function">add</span> @google-cloud/storage
</code></pre>
<p>Now that we have the package, lets start writing the code to take our buffer data and have it send it to our bucket.</p>
<p>To keep our code modular and easier to read/work with, I am going to create a file called <code>upload.ts</code> within the <code>src</code> folder. The code will look like this.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Storage</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@google-cloud/storage&#x27;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name"><span class="token maybe-class-name">IUpload</span></span> <span class="token punctuation">{</span>
  buffer<span class="token operator">:</span> <span class="token maybe-class-name">Buffer</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token maybe-class-name">Storage</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> buffer <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">IUpload</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> bucket <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token method function property-access">bucket</span><span class="token punctuation">(</span><span class="token string">&#x27;YOUR_BUCKET_NAME_HERE&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> file <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token method function property-access">file</span><span class="token punctuation">(</span><span class="token string">&#x27;test.jpg&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Uploads the file.</span>
  <span class="token keyword control-flow">return</span> <span class="token keyword control-flow">await</span> file<span class="token punctuation">.</span><span class="token method function property-access">save</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>There is one minor improvement we can make. Right now we are hardcoding the file name to <code>test.jpg</code>, this is no good if we want to scale this function. We have two options, and can choose either option or choose to combine both options into one.</p>
<p>The first option is to pass in a file name or ID via the client and use that as our ID. This gives us more control, and we can use slugs etc as our ID.</p>
<p>The other option is to generate a unique ID using UUID.</p>
<p>We can also combine both options and look for an ID param in the <code>req.body</code> and if it exists we will use it. If it does not exist, we can default to UUID. I actually like this option better, it&#x27;s more resilient and configurable. Lets build it!</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name"><span class="token maybe-class-name">IUpload</span></span> <span class="token punctuation">{</span>
  buffer<span class="token operator">:</span> <span class="token maybe-class-name">Buffer</span><span class="token punctuation">;</span>
  fileName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// Lets add this to our interface &amp; make it optional</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Now on line 12 we can write a ternary</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> file <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token method function property-access">file</span><span class="token punctuation">(</span>fileName <span class="token operator">?</span> fileName <span class="token operator">:</span> <span class="token string">&#x27;test.jpg&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Lets make sure to read this in our <code>req.body</code> within our <code>index.ts</code> file.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> <span class="token punctuation">{</span> title<span class="token punctuation">,</span> fileName <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token property-access">body</span><span class="token punctuation">;</span>
</code></pre>
<p>Then we must pass that argument into our <code>upload</code> function like this</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword control-flow">await</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  buffer<span class="token operator">:</span> screenshotBuffer<span class="token punctuation">,</span>
  fileName<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Great, but we know this variable can be <code>undefined</code> and in that case we want to use a library called <code>uuid</code> to uniquely generate an ID for us. Lets install it!</p>
<pre class="language-shell"><code class="language-shell"><span class="token function">yarn</span> <span class="token function">add</span> uuid <span class="token operator">&amp;&amp;</span> <span class="token function">yarn</span> <span class="token function">add</span> -D @types/uuid
</code></pre>
<p>Then lets use it in the place of <code>test.jpg</code> like this</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Storage</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@google-cloud/storage&#x27;</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> v1 <span class="token keyword module">as</span> uuid <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;uuid&#x27;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name"><span class="token maybe-class-name">IUpload</span></span> <span class="token punctuation">{</span>
  buffer<span class="token operator">:</span> <span class="token maybe-class-name">Buffer</span><span class="token punctuation">;</span>
  fileName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token maybe-class-name">Storage</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> buffer<span class="token punctuation">,</span> fileName <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">IUpload</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fName <span class="token operator">=</span> fileName <span class="token operator">?</span> fileName <span class="token operator">:</span> <span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#x27;.jpg&#x27;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> bucket <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token method function property-access">bucket</span><span class="token punctuation">(</span><span class="token string">&#x27;motionbox-og-images&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> file <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token method function property-access">file</span><span class="token punctuation">(</span>fName<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// lets return the file name if its uniquely generated so we can have reference on the client</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
    fName<span class="token punctuation">,</span>
    uploaded<span class="token operator">:</span> <span class="token keyword control-flow">await</span> file<span class="token punctuation">.</span><span class="token method function property-access">save</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>Then in our <code>index.ts</code> file we can send back the file name to the client in the case it is uniquely generated, this is important to maintain reference to where the file is located, in the case you want to save it in a database or render it on the screen upon a response.</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> uploadedFile <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  buffer<span class="token operator">:</span> screenshotBuffer<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

res<span class="token punctuation">.</span><span class="token method function property-access">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  created<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  uploadedFile<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>After sending your request you should get a response similar to this</p>
<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">&quot;created&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;uploadedFile&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;fName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eb54f610-a67d-11ed-a4e2-bda12d775f34.jpg&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>Deploying</h2>
<p>The final thing that we need to setup in order to deploy our function properly to GCP is a tiny little script command that will compile our TypeScript code and deploy for us.</p>
<p>Open your <code>package.json</code> file and add this new script key value pair. We already have the <code>start</code> script, we are now adding <code>deploy</code>.</p>
<pre class="language-json"><code class="language-json"><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npx tsc &amp;&amp; npx functions-framework --target=ogmaker --allow-unauthenticated&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;deploy&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npx tsc &amp;&amp; gcloud functions deploy ogmaker --gen2 --runtime=nodejs16 --region=us-central1 --source=. --entry-point=ogmaker --trigger-http --allow-unauthenticated --timeout=600 --memory=2GiB&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre>
<p>Before you can actually use the <code>gcloud</code> command you need to install it on your system and configure it. Here is a link to installation instructions for installing <code>gcloud</code> on your system <a href="https://cloud.google.com/sdk/docs/install" target="_blank" rel="noopener noreferrer">cloud.google.com/sdk/docs/install</a></p>
<p>Lastly, feel free to adjust the parameters of the <code>deploy</code> command you can adjust <code>--runtime</code> to use a different version of node.js. You can change your <code>--region</code>, <code>--timeout</code>, and <code>--memory</code> settings.</p>
<h2>Final thoughts</h2>
<p>I hope this was insightful, and again all this code is hosted on GitHub under this repo <a href="https://github.com/bluematter/ogmaker" target="_blank" rel="noopener noreferrer">github.com/bluematter/ogmaker</a>. If you have any suggestions on making this better, or would like to fork and have your own copy, please feel free to do so.</p>
<p>If you enjoyed this and want more, sign up to the newsletter where I will keep you in the loop.</p>
<p>I&#x27;m going to turn this code into a micro SaaS product and write another follow up post around how I will turn it into a product and market it. Subscribe if you want me to email you when that post is ready! 👇 enter your email for the updates, no spam, unsubscribe at any time.</p>]]></content:encoded>
            <author>spencer@planetaria.tech (Spencer Sharp)</author>
        </item>
    </channel>
</rss>